{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  _s();\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n\n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          if (parentSVG) {\n            var _textElement$previous, _textElement$previous2;\n            // Check if this text element already has a touch enhancer\n            const existingEnhancer = (_textElement$previous = textElement.previousSibling) === null || _textElement$previous === void 0 ? void 0 : (_textElement$previous2 = _textElement$previous.classList) === null || _textElement$previous2 === void 0 ? void 0 : _textElement$previous2.contains('touch-enhancer');\n            if (existingEnhancer) return;\n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 15); // Larger touch area\n            touchArea.setAttribute('y', bbox.y - 15); // Larger touch area\n            touchArea.setAttribute('width', bbox.width + 30); // Larger touch area\n            touchArea.setAttribute('height', bbox.height + 30); // Larger touch area\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n\n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n\n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', e => {\n              e.stopPropagation();\n              e.preventDefault(); // Prevent default touch behavior\n\n              // Highlight the text briefly to provide visual feedback\n              textElement.style.fill = '#64ffda';\n              setTimeout(() => {\n                textElement.style.fill = '';\n              }, 300);\n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n\n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n\n    // Enhance the minimized 3D model to ensure it's interactive\n    const enhanceMinimizedModel = () => {\n      const sceneContainer = document.querySelector('.scene-container[data-is-minimized=\"true\"]');\n      if (sceneContainer) {\n        // Ensure the minimized model is interactive\n        sceneContainer.style.pointerEvents = 'auto';\n        sceneContainer.style.zIndex = '9999';\n        sceneContainer.style.cursor = 'pointer';\n\n        // Add a subtle pulse animation to indicate interactivity\n        sceneContainer.style.animation = 'pulse 2s infinite ease-in-out';\n\n        // Make sure the container's click behavior is preserved\n        // We'll remove any existing click listeners first to avoid duplicates\n        const existingClickListener = sceneContainer._enhancedClickListener;\n        if (existingClickListener) {\n          sceneContainer.removeEventListener('click', existingClickListener);\n        }\n\n        // Add a click listener that navigates to the home page\n        const clickHandler = e => {\n          // Only handle clicks on the container itself, not on child elements\n          if (e.target === sceneContainer) {\n            e.stopPropagation();\n            // Use the existing React Router navigation\n            window.location.href = '/';\n          }\n        };\n        sceneContainer.addEventListener('click', clickHandler);\n        sceneContainer._enhancedClickListener = clickHandler;\n      }\n    };\n\n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n    enhanceMinimizedModel();\n\n    // Observe DOM changes to detect when new elements are added or attributes change\n    const observer = new MutationObserver(mutations => {\n      let shouldEnhanceInteraction = false;\n      let shouldEnhanceMinimizedModel = false;\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          shouldEnhanceInteraction = true;\n        }\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-is-minimized') {\n          shouldEnhanceMinimizedModel = true;\n        }\n      });\n      if (shouldEnhanceInteraction) enhanceMobileInteraction();\n      if (shouldEnhanceMinimizedModel) enhanceMinimizedModel();\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-is-minimized']\n    });\n\n    // Improve touch behavior for TrackballControls\n    const improveTrackballControls = () => {\n      const canvas = document.querySelector('canvas');\n      if (canvas) {\n        // Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\n        canvas.addEventListener('touchmove', e => {\n          if (e.target === canvas) {\n            e.preventDefault();\n          }\n        }, {\n          passive: false\n        });\n      }\n    };\n    improveTrackballControls();\n\n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n\n  // This component doesn't render anything visible\n  return null;\n};\n_s(MobileEnhancer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MobileEnhancer;\nexport default MobileEnhancer;\nvar _c;\n$RefreshReg$(_c, \"MobileEnhancer\");","map":{"version":3,"names":["React","useEffect","isMobile","MobileEnhancer","_s","enhanceMobileInteraction","textElements","document","querySelectorAll","forEach","textElement","enhanceTouchArea","bbox","getBBox","parentSVG","closest","_textElement$previous","_textElement$previous2","existingEnhancer","previousSibling","classList","contains","touchArea","createElementNS","setAttribute","x","y","width","height","parentNode","insertBefore","addEventListener","e","stopPropagation","preventDefault","style","fill","setTimeout","clickEvent","MouseEvent","bubbles","cancelable","view","window","dispatchEvent","enhanceMinimizedModel","sceneContainer","querySelector","pointerEvents","zIndex","cursor","animation","existingClickListener","_enhancedClickListener","removeEventListener","clickHandler","target","location","href","observer","MutationObserver","mutations","shouldEnhanceInteraction","shouldEnhanceMinimizedModel","mutation","type","addedNodes","length","attributeName","observe","body","childList","subtree","attributes","attributeFilter","improveTrackballControls","canvas","passive","disconnect","el","remove","_c","$RefreshReg$"],"sources":["D:/portfolio/src/components/MobileEnhancer.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n    \n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n      \n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          \n          if (parentSVG) {\n            // Check if this text element already has a touch enhancer\n            const existingEnhancer = textElement.previousSibling?.classList?.contains('touch-enhancer');\n            if (existingEnhancer) return;\n            \n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 15); // Larger touch area\n            touchArea.setAttribute('y', bbox.y - 15); // Larger touch area\n            touchArea.setAttribute('width', bbox.width + 30); // Larger touch area\n            touchArea.setAttribute('height', bbox.height + 30); // Larger touch area\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n            \n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n            \n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', (e) => {\n              e.stopPropagation();\n              e.preventDefault(); // Prevent default touch behavior\n              \n              // Highlight the text briefly to provide visual feedback\n              textElement.style.fill = '#64ffda';\n              setTimeout(() => {\n                textElement.style.fill = '';\n              }, 300);\n              \n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n        \n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n    \n    // Enhance the minimized 3D model to ensure it's interactive\n    const enhanceMinimizedModel = () => {\n      const sceneContainer = document.querySelector('.scene-container[data-is-minimized=\"true\"]');\n      if (sceneContainer) {\n        // Ensure the minimized model is interactive\n        sceneContainer.style.pointerEvents = 'auto';\n        sceneContainer.style.zIndex = '9999';\n        sceneContainer.style.cursor = 'pointer';\n        \n        // Add a subtle pulse animation to indicate interactivity\n        sceneContainer.style.animation = 'pulse 2s infinite ease-in-out';\n        \n        // Make sure the container's click behavior is preserved\n        // We'll remove any existing click listeners first to avoid duplicates\n        const existingClickListener = sceneContainer._enhancedClickListener;\n        if (existingClickListener) {\n          sceneContainer.removeEventListener('click', existingClickListener);\n        }\n        \n        // Add a click listener that navigates to the home page\n        const clickHandler = (e) => {\n          // Only handle clicks on the container itself, not on child elements\n          if (e.target === sceneContainer) {\n            e.stopPropagation();\n            // Use the existing React Router navigation\n            window.location.href = '/';\n          }\n        };\n        \n        sceneContainer.addEventListener('click', clickHandler);\n        sceneContainer._enhancedClickListener = clickHandler;\n      }\n    };\n    \n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n    enhanceMinimizedModel();\n    \n    // Observe DOM changes to detect when new elements are added or attributes change\n    const observer = new MutationObserver((mutations) => {\n      let shouldEnhanceInteraction = false;\n      let shouldEnhanceMinimizedModel = false;\n      \n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          shouldEnhanceInteraction = true;\n        }\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-is-minimized') {\n          shouldEnhanceMinimizedModel = true;\n        }\n      });\n      \n      if (shouldEnhanceInteraction) enhanceMobileInteraction();\n      if (shouldEnhanceMinimizedModel) enhanceMinimizedModel();\n    });\n    \n    observer.observe(document.body, { \n      childList: true, \n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-is-minimized']\n    });\n    \n    // Improve touch behavior for TrackballControls\n    const improveTrackballControls = () => {\n      const canvas = document.querySelector('canvas');\n      if (canvas) {\n        // Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\n        canvas.addEventListener('touchmove', (e) => {\n          if (e.target === canvas) {\n            e.preventDefault();\n          }\n        }, { passive: false });\n      }\n    };\n    \n    improveTrackballControls();\n    \n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n  \n  // This component doesn't render anything visible\n  return null;\n};\n\nexport default MobileEnhancer;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,qBAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3BH,SAAS,CAAC,MAAM;IACd,IAAI,CAACC,QAAQ,EAAE,OAAO,CAAC;;IAEvB;IACA,MAAMG,wBAAwB,GAAGA,CAAA,KAAM;MACrC;MACA,MAAMC,YAAY,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,MAAM,CAAC;MAEtDF,YAAY,CAACG,OAAO,CAACC,WAAW,IAAI;QAClC;QACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;UAC7B;UACA,MAAMC,IAAI,GAAGF,WAAW,CAACG,OAAO,CAAC,CAAC;UAClC,MAAMC,SAAS,GAAGJ,WAAW,CAACK,OAAO,CAAC,KAAK,CAAC;UAE5C,IAAID,SAAS,EAAE;YAAA,IAAAE,qBAAA,EAAAC,sBAAA;YACb;YACA,MAAMC,gBAAgB,IAAAF,qBAAA,GAAGN,WAAW,CAACS,eAAe,cAAAH,qBAAA,wBAAAC,sBAAA,GAA3BD,qBAAA,CAA6BI,SAAS,cAAAH,sBAAA,uBAAtCA,sBAAA,CAAwCI,QAAQ,CAAC,gBAAgB,CAAC;YAC3F,IAAIH,gBAAgB,EAAE;YAEtB,MAAMI,SAAS,GAAGf,QAAQ,CAACgB,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC;YAChFD,SAAS,CAACE,YAAY,CAAC,GAAG,EAAEZ,IAAI,CAACa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC1CH,SAAS,CAACE,YAAY,CAAC,GAAG,EAAEZ,IAAI,CAACc,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC1CJ,SAAS,CAACE,YAAY,CAAC,OAAO,EAAEZ,IAAI,CAACe,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;YAClDL,SAAS,CAACE,YAAY,CAAC,QAAQ,EAAEZ,IAAI,CAACgB,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;YACpDN,SAAS,CAACE,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC;YAC7CF,SAAS,CAACE,YAAY,CAAC,OAAO,EAAE,gBAAgB,CAAC;;YAEjD;YACAd,WAAW,CAACmB,UAAU,CAACC,YAAY,CAACR,SAAS,EAAEZ,WAAW,CAAC;;YAE3D;YACAY,SAAS,CAACS,gBAAgB,CAAC,YAAY,EAAGC,CAAC,IAAK;cAC9CA,CAAC,CAACC,eAAe,CAAC,CAAC;cACnBD,CAAC,CAACE,cAAc,CAAC,CAAC,CAAC,CAAC;;cAEpB;cACAxB,WAAW,CAACyB,KAAK,CAACC,IAAI,GAAG,SAAS;cAClCC,UAAU,CAAC,MAAM;gBACf3B,WAAW,CAACyB,KAAK,CAACC,IAAI,GAAG,EAAE;cAC7B,CAAC,EAAE,GAAG,CAAC;cAEP,MAAME,UAAU,GAAG,IAAIC,UAAU,CAAC,OAAO,EAAE;gBACzCC,OAAO,EAAE,IAAI;gBACbC,UAAU,EAAE,IAAI;gBAChBC,IAAI,EAAEC;cACR,CAAC,CAAC;cACFjC,WAAW,CAACkC,aAAa,CAACN,UAAU,CAAC;YACvC,CAAC,CAAC;UACJ;QACF,CAAC;;QAED;QACAD,UAAU,CAAC1B,gBAAgB,EAAE,IAAI,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMkC,qBAAqB,GAAGA,CAAA,KAAM;MAClC,MAAMC,cAAc,GAAGvC,QAAQ,CAACwC,aAAa,CAAC,4CAA4C,CAAC;MAC3F,IAAID,cAAc,EAAE;QAClB;QACAA,cAAc,CAACX,KAAK,CAACa,aAAa,GAAG,MAAM;QAC3CF,cAAc,CAACX,KAAK,CAACc,MAAM,GAAG,MAAM;QACpCH,cAAc,CAACX,KAAK,CAACe,MAAM,GAAG,SAAS;;QAEvC;QACAJ,cAAc,CAACX,KAAK,CAACgB,SAAS,GAAG,+BAA+B;;QAEhE;QACA;QACA,MAAMC,qBAAqB,GAAGN,cAAc,CAACO,sBAAsB;QACnE,IAAID,qBAAqB,EAAE;UACzBN,cAAc,CAACQ,mBAAmB,CAAC,OAAO,EAAEF,qBAAqB,CAAC;QACpE;;QAEA;QACA,MAAMG,YAAY,GAAIvB,CAAC,IAAK;UAC1B;UACA,IAAIA,CAAC,CAACwB,MAAM,KAAKV,cAAc,EAAE;YAC/Bd,CAAC,CAACC,eAAe,CAAC,CAAC;YACnB;YACAU,MAAM,CAACc,QAAQ,CAACC,IAAI,GAAG,GAAG;UAC5B;QACF,CAAC;QAEDZ,cAAc,CAACf,gBAAgB,CAAC,OAAO,EAAEwB,YAAY,CAAC;QACtDT,cAAc,CAACO,sBAAsB,GAAGE,YAAY;MACtD;IACF,CAAC;;IAED;IACAlD,wBAAwB,CAAC,CAAC;IAC1BwC,qBAAqB,CAAC,CAAC;;IAEvB;IACA,MAAMc,QAAQ,GAAG,IAAIC,gBAAgB,CAAEC,SAAS,IAAK;MACnD,IAAIC,wBAAwB,GAAG,KAAK;MACpC,IAAIC,2BAA2B,GAAG,KAAK;MAEvCF,SAAS,CAACpD,OAAO,CAAEuD,QAAQ,IAAK;QAC9B,IAAIA,QAAQ,CAACC,IAAI,KAAK,WAAW,IAAID,QAAQ,CAACE,UAAU,CAACC,MAAM,EAAE;UAC/DL,wBAAwB,GAAG,IAAI;QACjC;QACA,IAAIE,QAAQ,CAACC,IAAI,KAAK,YAAY,IAAID,QAAQ,CAACI,aAAa,KAAK,mBAAmB,EAAE;UACpFL,2BAA2B,GAAG,IAAI;QACpC;MACF,CAAC,CAAC;MAEF,IAAID,wBAAwB,EAAEzD,wBAAwB,CAAC,CAAC;MACxD,IAAI0D,2BAA2B,EAAElB,qBAAqB,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEFc,QAAQ,CAACU,OAAO,CAAC9D,QAAQ,CAAC+D,IAAI,EAAE;MAC9BC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,IAAI;MAChBC,eAAe,EAAE,CAAC,mBAAmB;IACvC,CAAC,CAAC;;IAEF;IACA,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;MACrC,MAAMC,MAAM,GAAGrE,QAAQ,CAACwC,aAAa,CAAC,QAAQ,CAAC;MAC/C,IAAI6B,MAAM,EAAE;QACV;QACAA,MAAM,CAAC7C,gBAAgB,CAAC,WAAW,EAAGC,CAAC,IAAK;UAC1C,IAAIA,CAAC,CAACwB,MAAM,KAAKoB,MAAM,EAAE;YACvB5C,CAAC,CAACE,cAAc,CAAC,CAAC;UACpB;QACF,CAAC,EAAE;UAAE2C,OAAO,EAAE;QAAM,CAAC,CAAC;MACxB;IACF,CAAC;IAEDF,wBAAwB,CAAC,CAAC;;IAE1B;IACA,OAAO,MAAM;MACXhB,QAAQ,CAACmB,UAAU,CAAC,CAAC;MACrB;MACAvE,QAAQ,CAACC,gBAAgB,CAAC,iBAAiB,CAAC,CAACC,OAAO,CAACsE,EAAE,IAAIA,EAAE,CAACC,MAAM,CAAC,CAAC,CAAC;IACzE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,OAAO,IAAI;AACb,CAAC;AAAC5E,EAAA,CAlJID,cAAc;AAAA8E,EAAA,GAAd9E,cAAc;AAoJpB,eAAeA,cAAc;AAAC,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}