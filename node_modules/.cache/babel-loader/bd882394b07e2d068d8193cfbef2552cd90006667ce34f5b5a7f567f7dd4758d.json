{"ast":null,"code":"import React,{useEffect}from'react';import{isMobile}from'react-device-detect';/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */const MobileEnhancer=()=>{useEffect(()=>{if(!isMobile)return;// Only apply enhancements on mobile devices\n// Apply mobile-specific touch event handling\nconst enhanceMobileInteraction=()=>{// Find all Text elements in the 3D scene (the navigation words)\nconst textElements=document.querySelectorAll('text');textElements.forEach(textElement=>{// Make text elements more touch-friendly\nconst enhanceTouchArea=()=>{// Create a larger invisible touch area around each text element\nconst bbox=textElement.getBBox();const parentSVG=textElement.closest('svg');if(parentSVG){var _textElement$previous,_textElement$previous2;// Check if this text element already has a touch enhancer\nconst existingEnhancer=(_textElement$previous=textElement.previousSibling)===null||_textElement$previous===void 0?void 0:(_textElement$previous2=_textElement$previous.classList)===null||_textElement$previous2===void 0?void 0:_textElement$previous2.contains('touch-enhancer');if(existingEnhancer)return;const touchArea=document.createElementNS('http://www.w3.org/2000/svg','rect');touchArea.setAttribute('x',bbox.x-15);// Larger touch area\ntouchArea.setAttribute('y',bbox.y-15);// Larger touch area\ntouchArea.setAttribute('width',bbox.width+30);// Larger touch area\ntouchArea.setAttribute('height',bbox.height+30);// Larger touch area\ntouchArea.setAttribute('fill','transparent');touchArea.setAttribute('class','touch-enhancer');// Insert before the text element so it's behind it\ntextElement.parentNode.insertBefore(touchArea,textElement);// Forward touch events to the text element\ntouchArea.addEventListener('touchstart',e=>{e.stopPropagation();e.preventDefault();// Prevent default touch behavior\n// Highlight the text briefly to provide visual feedback\ntextElement.style.fill='#64ffda';setTimeout(()=>{textElement.style.fill='';},300);const clickEvent=new MouseEvent('click',{bubbles:true,cancelable:true,view:window});textElement.dispatchEvent(clickEvent);});}};// Apply enhancement after a short delay to ensure the 3D scene is fully rendered\nsetTimeout(enhanceTouchArea,1000);});};// Enhance the minimized 3D model to ensure it's interactive\nconst enhanceMinimizedModel=()=>{const sceneContainer=document.querySelector('.scene-container[data-is-minimized=\"true\"]');if(sceneContainer){// Ensure the minimized model is interactive\nsceneContainer.style.pointerEvents='auto';sceneContainer.style.zIndex='9999';sceneContainer.style.cursor='pointer';// Add a subtle pulse animation to indicate interactivity\nsceneContainer.style.animation='pulse 2s infinite ease-in-out';// Make sure the container's click behavior is preserved\n// We'll remove any existing click listeners first to avoid duplicates\nconst existingClickListener=sceneContainer._enhancedClickListener;if(existingClickListener){sceneContainer.removeEventListener('click',existingClickListener);}// Add click and touch listeners that navigate to the home page\nconst clickHandler=e=>{// Handle clicks anywhere within the minimized 3D model\ne.stopPropagation();// Use history API instead of direct location change for better compatibility\nwindow.history.pushState({},'','/');// Dispatch a navigation event to ensure React Router updates\nwindow.dispatchEvent(new Event('popstate'));};const touchHandler=e=>{// Handle touches anywhere within the minimized 3D model\ne.stopPropagation();e.preventDefault();// Prevent default touch behavior\n// Use history API instead of direct location change for better compatibility\nwindow.history.pushState({},'','/');// Dispatch a navigation event to ensure React Router updates\nwindow.dispatchEvent(new Event('popstate'));};// Remove existing listeners if they exist\nconst existingTouchListener=sceneContainer._enhancedTouchListener;if(existingTouchListener){sceneContainer.removeEventListener('touchstart',existingTouchListener);}sceneContainer.addEventListener('click',clickHandler);sceneContainer.addEventListener('touchstart',touchHandler);sceneContainer._enhancedClickListener=clickHandler;sceneContainer._enhancedTouchListener=touchHandler;}};// Apply enhancements after component mounts and whenever route changes\nenhanceMobileInteraction();enhanceMinimizedModel();// Observe DOM changes to detect when new elements are added or attributes change\nconst observer=new MutationObserver(mutations=>{let shouldEnhanceInteraction=false;let shouldEnhanceMinimizedModel=false;mutations.forEach(mutation=>{if(mutation.type==='childList'&&mutation.addedNodes.length){shouldEnhanceInteraction=true;}if(mutation.type==='attributes'&&mutation.attributeName==='data-is-minimized'){shouldEnhanceMinimizedModel=true;}});if(shouldEnhanceInteraction)enhanceMobileInteraction();if(shouldEnhanceMinimizedModel)enhanceMinimizedModel();});observer.observe(document.body,{childList:true,subtree:true,attributes:true,attributeFilter:['data-is-minimized']});// Improve touch behavior for TrackballControls\nconst improveTrackballControls=()=>{const canvas=document.querySelector('canvas');if(canvas){// Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\ncanvas.addEventListener('touchmove',e=>{if(e.target===canvas){e.preventDefault();}},{passive:false});}};improveTrackballControls();// Cleanup function\nreturn()=>{observer.disconnect();// Remove any added touch enhancers\ndocument.querySelectorAll('.touch-enhancer').forEach(el=>el.remove());};},[]);// This component doesn't render anything visible\nreturn null;};export default MobileEnhancer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}