{"ast":null,"code":"import * as THREE from 'three';\nimport { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useMemo, useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nfunction useCubeCamera() {\n  let {\n    resolution = 256,\n    near = 0.1,\n    far = 1000,\n    envMap,\n    fog\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const gl = useThree(_ref => {\n    let {\n      gl\n    } = _ref;\n    return gl;\n  });\n  const scene = useThree(_ref2 => {\n    let {\n      scene\n    } = _ref2;\n    return scene;\n  });\n  const fbo = useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  useEffect(() => {\n    return () => {\n      fbo.dispose();\n    };\n  }, [fbo]);\n  const camera = useMemo(() => new THREE.CubeCamera(near, far, fbo), [near, far, fbo]);\n  let originalFog;\n  let originalBackground;\n  const update = React.useCallback(() => {\n    originalFog = scene.fog;\n    originalBackground = scene.background;\n    scene.background = envMap || originalBackground;\n    scene.fog = fog || originalFog;\n    camera.update(gl, scene);\n    scene.fog = originalFog;\n    scene.background = originalBackground;\n  }, [gl, scene, camera]);\n  return {\n    fbo,\n    camera,\n    update\n  };\n}\nexport { useCubeCamera };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}