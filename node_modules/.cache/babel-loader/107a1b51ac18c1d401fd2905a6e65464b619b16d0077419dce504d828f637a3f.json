{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nimport { version } from '../helpers/constants.js';\n\n// {texture: THREE.Texture} XOR {url: string}\n\nconst ImageMaterialImpl = /* @__PURE__ */shaderMaterial({\n  color: /* @__PURE__ */new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0,\n  opacity: 1\n}, /* glsl */`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`, /* glsl */`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  uniform float opacity;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n  }\n`);\nconst ImageBase = /* @__PURE__ */React.forwardRef((_ref, ref) => {\n  let {\n    children,\n    color,\n    segments = 1,\n    scale = 1,\n    zoom = 1,\n    grayscale = 0,\n    opacity = 1,\n    texture,\n    toneMapped,\n    transparent,\n    side,\n    ...props\n  } = _ref;\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: Array.isArray(scale) ? [...scale, 1] : scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    opacity: opacity,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped,\n    transparent: transparent,\n    side: side\n  }), children);\n});\nconst ImageWithUrl = /* @__PURE__ */React.forwardRef((_ref2, ref) => {\n  let {\n    url,\n    ...props\n  } = _ref2;\n  const texture = useTexture(url);\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    texture: texture,\n    ref: ref\n  }));\n});\nconst ImageWithTexture = /* @__PURE__ */React.forwardRef((_ref3, ref) => {\n  let {\n    url: _url,\n    ...props\n  } = _ref3;\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    ref: ref\n  }));\n});\nconst Image = /* @__PURE__ */React.forwardRef((props, ref) => {\n  if (props.url) return /*#__PURE__*/React.createElement(ImageWithUrl, _extends({}, props, {\n    ref: ref\n  }));else if (props.texture) return /*#__PURE__*/React.createElement(ImageWithTexture, _extends({}, props, {\n    ref: ref\n  }));else throw new Error('<Image /> requires a url or texture');\n});\nexport { Image };","map":{"version":3,"names":["_extends","React","THREE","extend","shaderMaterial","useTexture","version","ImageMaterialImpl","color","Color","scale","imageBounds","map","zoom","grayscale","opacity","ImageBase","forwardRef","_ref","ref","children","segments","texture","toneMapped","transparent","side","props","ImageMaterial","planeBounds","Array","isArray","image","width","height","createElement","args","ImageWithUrl","_ref2","url","ImageWithTexture","_ref3","_url","Image","Error"],"sources":["D:/portfolio/node_modules/@react-three/drei/core/Image.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nimport { version } from '../helpers/constants.js';\n\n// {texture: THREE.Texture} XOR {url: string}\n\nconst ImageMaterialImpl = /* @__PURE__ */shaderMaterial({\n  color: /* @__PURE__ */new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0,\n  opacity: 1\n}, /* glsl */`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`, /* glsl */`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  uniform float opacity;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n  }\n`);\nconst ImageBase = /* @__PURE__ */React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  opacity = 1,\n  texture,\n  toneMapped,\n  transparent,\n  side,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: Array.isArray(scale) ? [...scale, 1] : scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    opacity: opacity,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped,\n    transparent: transparent,\n    side: side\n  }), children);\n});\nconst ImageWithUrl = /* @__PURE__ */React.forwardRef(({\n  url,\n  ...props\n}, ref) => {\n  const texture = useTexture(url);\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    texture: texture,\n    ref: ref\n  }));\n});\nconst ImageWithTexture = /* @__PURE__ */React.forwardRef(({\n  url: _url,\n  ...props\n}, ref) => {\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    ref: ref\n  }));\n});\nconst Image = /* @__PURE__ */React.forwardRef((props, ref) => {\n  if (props.url) return /*#__PURE__*/React.createElement(ImageWithUrl, _extends({}, props, {\n    ref: ref\n  }));else if (props.texture) return /*#__PURE__*/React.createElement(ImageWithTexture, _extends({}, props, {\n    ref: ref\n  }));else throw new Error('<Image /> requires a url or texture');\n});\n\nexport { Image };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}