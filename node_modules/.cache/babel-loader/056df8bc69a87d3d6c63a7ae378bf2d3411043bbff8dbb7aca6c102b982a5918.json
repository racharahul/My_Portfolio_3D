{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  _s();\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n\n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          if (parentSVG) {\n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 10);\n            touchArea.setAttribute('y', bbox.y - 10);\n            touchArea.setAttribute('width', bbox.width + 20);\n            touchArea.setAttribute('height', bbox.height + 20);\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n\n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n\n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', e => {\n              e.stopPropagation();\n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n\n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n\n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n\n    // Observe DOM changes to detect when new text elements are added (e.g., after navigation)\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.addedNodes.length) {\n          enhanceMobileInteraction();\n        }\n      });\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n\n  // This component doesn't render anything visible\n  return null;\n};\n_s(MobileEnhancer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MobileEnhancer;\nexport default MobileEnhancer;\nvar _c;\n$RefreshReg$(_c, \"MobileEnhancer\");","map":{"version":3,"names":["React","useEffect","isMobile","MobileEnhancer","_s","enhanceMobileInteraction","textElements","document","querySelectorAll","forEach","textElement","enhanceTouchArea","bbox","getBBox","parentSVG","closest","touchArea","createElementNS","setAttribute","x","y","width","height","parentNode","insertBefore","addEventListener","e","stopPropagation","clickEvent","MouseEvent","bubbles","cancelable","view","window","dispatchEvent","setTimeout","observer","MutationObserver","mutations","mutation","addedNodes","length","observe","body","childList","subtree","disconnect","el","remove","_c","$RefreshReg$"],"sources":["D:/portfolio/src/components/MobileEnhancer.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n    \n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n      \n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          \n          if (parentSVG) {\n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 10);\n            touchArea.setAttribute('y', bbox.y - 10);\n            touchArea.setAttribute('width', bbox.width + 20);\n            touchArea.setAttribute('height', bbox.height + 20);\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n            \n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n            \n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', (e) => {\n              e.stopPropagation();\n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n        \n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n    \n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n    \n    // Observe DOM changes to detect when new text elements are added (e.g., after navigation)\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.addedNodes.length) {\n          enhanceMobileInteraction();\n        }\n      });\n    });\n    \n    observer.observe(document.body, { childList: true, subtree: true });\n    \n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n  \n  // This component doesn't render anything visible\n  return null;\n};\n\nexport default MobileEnhancer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}