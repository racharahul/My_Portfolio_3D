{"ast":null,"code":"import React,{useEffect}from'react';import{isMobile}from'react-device-detect';/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */const MobileEnhancer=()=>{useEffect(()=>{if(!isMobile)return;// Only apply enhancements on mobile devices\n// Apply mobile-specific touch event handling\nconst enhanceMobileInteraction=()=>{// Find all Text elements in the 3D scene (the navigation words)\nconst textElements=document.querySelectorAll('text');textElements.forEach(textElement=>{// Make text elements more touch-friendly\nconst enhanceTouchArea=()=>{// Create a larger invisible touch area around each text element\nconst bbox=textElement.getBBox();const parentSVG=textElement.closest('svg');if(parentSVG){var _textElement$previous,_textElement$previous2;// Check if this text element already has a touch enhancer\nconst existingEnhancer=(_textElement$previous=textElement.previousSibling)===null||_textElement$previous===void 0?void 0:(_textElement$previous2=_textElement$previous.classList)===null||_textElement$previous2===void 0?void 0:_textElement$previous2.contains('touch-enhancer');if(existingEnhancer)return;const touchArea=document.createElementNS('http://www.w3.org/2000/svg','rect');touchArea.setAttribute('x',bbox.x-15);// Larger touch area\ntouchArea.setAttribute('y',bbox.y-15);// Larger touch area\ntouchArea.setAttribute('width',bbox.width+30);// Larger touch area\ntouchArea.setAttribute('height',bbox.height+30);// Larger touch area\ntouchArea.setAttribute('fill','transparent');touchArea.setAttribute('class','touch-enhancer');// Insert before the text element so it's behind it\ntextElement.parentNode.insertBefore(touchArea,textElement);// Forward touch events to the text element\ntouchArea.addEventListener('touchstart',e=>{e.stopPropagation();e.preventDefault();// Prevent default touch behavior\n// Highlight the text briefly to provide visual feedback\ntextElement.style.fill='#64ffda';setTimeout(()=>{textElement.style.fill='';},300);const clickEvent=new MouseEvent('click',{bubbles:true,cancelable:true,view:window});textElement.dispatchEvent(clickEvent);});}};// Apply enhancement after a short delay to ensure the 3D scene is fully rendered\nsetTimeout(enhanceTouchArea,1000);});};// Enhance the minimized 3D model to ensure it's interactive\nconst enhanceMinimizedModel=()=>{const sceneContainer=document.querySelector('.scene-container[data-is-minimized=\"true\"]');if(sceneContainer){// Ensure the minimized model is interactive\nsceneContainer.style.pointerEvents='auto';sceneContainer.style.zIndex='9999';sceneContainer.style.cursor='pointer';// Add a subtle pulse animation to indicate interactivity\nsceneContainer.style.animation='pulse 2s infinite ease-in-out';// Make sure the container's click behavior is preserved\n// We'll remove any existing click listeners first to avoid duplicates\nconst existingClickListener=sceneContainer._enhancedClickListener;if(existingClickListener){sceneContainer.removeEventListener('click',existingClickListener);}// Add click and touch listeners that navigate to the home page\nconst clickHandler=e=>{// Handle clicks anywhere within the minimized 3D model\ne.stopPropagation();// Use history API instead of direct location change for better compatibility\nwindow.history.pushState({},'','/');// Dispatch a navigation event to ensure React Router updates\nwindow.dispatchEvent(new Event('popstate'));};const touchHandler=e=>{// Handle touches anywhere within the minimized 3D model\ne.stopPropagation();e.preventDefault();// Prevent default touch behavior\n// Use history API instead of direct location change for better compatibility\nwindow.history.pushState({},'','/');// Dispatch a navigation event to ensure React Router updates\nwindow.dispatchEvent(new Event('popstate'));};// Remove existing listeners if they exist\nconst existingTouchListener=sceneContainer._enhancedTouchListener;if(existingTouchListener){sceneContainer.removeEventListener('touchstart',existingTouchListener);}sceneContainer.addEventListener('click',clickHandler);sceneContainer.addEventListener('touchstart',touchHandler);sceneContainer._enhancedClickListener=clickHandler;sceneContainer._enhancedTouchListener=touchHandler;}};// Apply enhancements after component mounts and whenever route changes\nenhanceMobileInteraction();enhanceMinimizedModel();// Observe DOM changes to detect when new elements are added or attributes change\nconst observer=new MutationObserver(mutations=>{let shouldEnhanceInteraction=false;let shouldEnhanceMinimizedModel=false;mutations.forEach(mutation=>{if(mutation.type==='childList'&&mutation.addedNodes.length){shouldEnhanceInteraction=true;}if(mutation.type==='attributes'&&mutation.attributeName==='data-is-minimized'){shouldEnhanceMinimizedModel=true;}});if(shouldEnhanceInteraction)enhanceMobileInteraction();if(shouldEnhanceMinimizedModel)enhanceMinimizedModel();});observer.observe(document.body,{childList:true,subtree:true,attributes:true,attributeFilter:['data-is-minimized']});// Improve touch behavior for TrackballControls\nconst improveTrackballControls=()=>{const canvas=document.querySelector('canvas');if(canvas){// Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\ncanvas.addEventListener('touchmove',e=>{if(e.target===canvas){e.preventDefault();}},{passive:false});}};improveTrackballControls();// Cleanup function\nreturn()=>{observer.disconnect();// Remove any added touch enhancers\ndocument.querySelectorAll('.touch-enhancer').forEach(el=>el.remove());};},[]);// This component doesn't render anything visible\nreturn null;};export default MobileEnhancer;","map":{"version":3,"names":["React","useEffect","isMobile","MobileEnhancer","enhanceMobileInteraction","textElements","document","querySelectorAll","forEach","textElement","enhanceTouchArea","bbox","getBBox","parentSVG","closest","_textElement$previous","_textElement$previous2","existingEnhancer","previousSibling","classList","contains","touchArea","createElementNS","setAttribute","x","y","width","height","parentNode","insertBefore","addEventListener","e","stopPropagation","preventDefault","style","fill","setTimeout","clickEvent","MouseEvent","bubbles","cancelable","view","window","dispatchEvent","enhanceMinimizedModel","sceneContainer","querySelector","pointerEvents","zIndex","cursor","animation","existingClickListener","_enhancedClickListener","removeEventListener","clickHandler","history","pushState","Event","touchHandler","existingTouchListener","_enhancedTouchListener","observer","MutationObserver","mutations","shouldEnhanceInteraction","shouldEnhanceMinimizedModel","mutation","type","addedNodes","length","attributeName","observe","body","childList","subtree","attributes","attributeFilter","improveTrackballControls","canvas","target","passive","disconnect","el","remove"],"sources":["D:/portfolio/src/components/MobileEnhancer.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n    \n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n      \n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          \n          if (parentSVG) {\n            // Check if this text element already has a touch enhancer\n            const existingEnhancer = textElement.previousSibling?.classList?.contains('touch-enhancer');\n            if (existingEnhancer) return;\n            \n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 15); // Larger touch area\n            touchArea.setAttribute('y', bbox.y - 15); // Larger touch area\n            touchArea.setAttribute('width', bbox.width + 30); // Larger touch area\n            touchArea.setAttribute('height', bbox.height + 30); // Larger touch area\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n            \n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n            \n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', (e) => {\n              e.stopPropagation();\n              e.preventDefault(); // Prevent default touch behavior\n              \n              // Highlight the text briefly to provide visual feedback\n              textElement.style.fill = '#64ffda';\n              setTimeout(() => {\n                textElement.style.fill = '';\n              }, 300);\n              \n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n        \n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n    \n    // Enhance the minimized 3D model to ensure it's interactive\n    const enhanceMinimizedModel = () => {\n      const sceneContainer = document.querySelector('.scene-container[data-is-minimized=\"true\"]');\n      if (sceneContainer) {\n        // Ensure the minimized model is interactive\n        sceneContainer.style.pointerEvents = 'auto';\n        sceneContainer.style.zIndex = '9999';\n        sceneContainer.style.cursor = 'pointer';\n        \n        // Add a subtle pulse animation to indicate interactivity\n        sceneContainer.style.animation = 'pulse 2s infinite ease-in-out';\n        \n        // Make sure the container's click behavior is preserved\n        // We'll remove any existing click listeners first to avoid duplicates\n        const existingClickListener = sceneContainer._enhancedClickListener;\n        if (existingClickListener) {\n          sceneContainer.removeEventListener('click', existingClickListener);\n        }\n        \n        // Add click and touch listeners that navigate to the home page\n        const clickHandler = (e) => {\n          // Handle clicks anywhere within the minimized 3D model\n          e.stopPropagation();\n          // Use history API instead of direct location change for better compatibility\n          window.history.pushState({}, '', '/');\n          // Dispatch a navigation event to ensure React Router updates\n          window.dispatchEvent(new Event('popstate'));\n        };\n        \n        const touchHandler = (e) => {\n          // Handle touches anywhere within the minimized 3D model\n          e.stopPropagation();\n          e.preventDefault(); // Prevent default touch behavior\n          // Use history API instead of direct location change for better compatibility\n          window.history.pushState({}, '', '/');\n          // Dispatch a navigation event to ensure React Router updates\n          window.dispatchEvent(new Event('popstate'));\n        };\n        \n        // Remove existing listeners if they exist\n        const existingTouchListener = sceneContainer._enhancedTouchListener;\n        if (existingTouchListener) {\n          sceneContainer.removeEventListener('touchstart', existingTouchListener);\n        }\n        \n        sceneContainer.addEventListener('click', clickHandler);\n        sceneContainer.addEventListener('touchstart', touchHandler);\n        sceneContainer._enhancedClickListener = clickHandler;\n        sceneContainer._enhancedTouchListener = touchHandler;\n      }\n    };\n    \n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n    enhanceMinimizedModel();\n    \n    // Observe DOM changes to detect when new elements are added or attributes change\n    const observer = new MutationObserver((mutations) => {\n      let shouldEnhanceInteraction = false;\n      let shouldEnhanceMinimizedModel = false;\n      \n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          shouldEnhanceInteraction = true;\n        }\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-is-minimized') {\n          shouldEnhanceMinimizedModel = true;\n        }\n      });\n      \n      if (shouldEnhanceInteraction) enhanceMobileInteraction();\n      if (shouldEnhanceMinimizedModel) enhanceMinimizedModel();\n    });\n    \n    observer.observe(document.body, { \n      childList: true, \n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-is-minimized']\n    });\n    \n    // Improve touch behavior for TrackballControls\n    const improveTrackballControls = () => {\n      const canvas = document.querySelector('canvas');\n      if (canvas) {\n        // Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\n        canvas.addEventListener('touchmove', (e) => {\n          if (e.target === canvas) {\n            e.preventDefault();\n          }\n        }, { passive: false });\n      }\n    };\n    \n    improveTrackballControls();\n    \n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n  \n  // This component doesn't render anything visible\n  return null;\n};\n\nexport default MobileEnhancer;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,QAAQ,KAAQ,qBAAqB,CAE9C;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3BF,SAAS,CAAC,IAAM,CACd,GAAI,CAACC,QAAQ,CAAE,OAAQ;AAEvB;AACA,KAAM,CAAAE,wBAAwB,CAAGA,CAAA,GAAM,CACrC;AACA,KAAM,CAAAC,YAAY,CAAGC,QAAQ,CAACC,gBAAgB,CAAC,MAAM,CAAC,CAEtDF,YAAY,CAACG,OAAO,CAACC,WAAW,EAAI,CAClC;AACA,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B;AACA,KAAM,CAAAC,IAAI,CAAGF,WAAW,CAACG,OAAO,CAAC,CAAC,CAClC,KAAM,CAAAC,SAAS,CAAGJ,WAAW,CAACK,OAAO,CAAC,KAAK,CAAC,CAE5C,GAAID,SAAS,CAAE,KAAAE,qBAAA,CAAAC,sBAAA,CACb;AACA,KAAM,CAAAC,gBAAgB,EAAAF,qBAAA,CAAGN,WAAW,CAACS,eAAe,UAAAH,qBAAA,kBAAAC,sBAAA,CAA3BD,qBAAA,CAA6BI,SAAS,UAAAH,sBAAA,iBAAtCA,sBAAA,CAAwCI,QAAQ,CAAC,gBAAgB,CAAC,CAC3F,GAAIH,gBAAgB,CAAE,OAEtB,KAAM,CAAAI,SAAS,CAAGf,QAAQ,CAACgB,eAAe,CAAC,4BAA4B,CAAE,MAAM,CAAC,CAChFD,SAAS,CAACE,YAAY,CAAC,GAAG,CAAEZ,IAAI,CAACa,CAAC,CAAG,EAAE,CAAC,CAAE;AAC1CH,SAAS,CAACE,YAAY,CAAC,GAAG,CAAEZ,IAAI,CAACc,CAAC,CAAG,EAAE,CAAC,CAAE;AAC1CJ,SAAS,CAACE,YAAY,CAAC,OAAO,CAAEZ,IAAI,CAACe,KAAK,CAAG,EAAE,CAAC,CAAE;AAClDL,SAAS,CAACE,YAAY,CAAC,QAAQ,CAAEZ,IAAI,CAACgB,MAAM,CAAG,EAAE,CAAC,CAAE;AACpDN,SAAS,CAACE,YAAY,CAAC,MAAM,CAAE,aAAa,CAAC,CAC7CF,SAAS,CAACE,YAAY,CAAC,OAAO,CAAE,gBAAgB,CAAC,CAEjD;AACAd,WAAW,CAACmB,UAAU,CAACC,YAAY,CAACR,SAAS,CAAEZ,WAAW,CAAC,CAE3D;AACAY,SAAS,CAACS,gBAAgB,CAAC,YAAY,CAAGC,CAAC,EAAK,CAC9CA,CAAC,CAACC,eAAe,CAAC,CAAC,CACnBD,CAAC,CAACE,cAAc,CAAC,CAAC,CAAE;AAEpB;AACAxB,WAAW,CAACyB,KAAK,CAACC,IAAI,CAAG,SAAS,CAClCC,UAAU,CAAC,IAAM,CACf3B,WAAW,CAACyB,KAAK,CAACC,IAAI,CAAG,EAAE,CAC7B,CAAC,CAAE,GAAG,CAAC,CAEP,KAAM,CAAAE,UAAU,CAAG,GAAI,CAAAC,UAAU,CAAC,OAAO,CAAE,CACzCC,OAAO,CAAE,IAAI,CACbC,UAAU,CAAE,IAAI,CAChBC,IAAI,CAAEC,MACR,CAAC,CAAC,CACFjC,WAAW,CAACkC,aAAa,CAACN,UAAU,CAAC,CACvC,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACAD,UAAU,CAAC1B,gBAAgB,CAAE,IAAI,CAAC,CACpC,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAkC,qBAAqB,CAAGA,CAAA,GAAM,CAClC,KAAM,CAAAC,cAAc,CAAGvC,QAAQ,CAACwC,aAAa,CAAC,4CAA4C,CAAC,CAC3F,GAAID,cAAc,CAAE,CAClB;AACAA,cAAc,CAACX,KAAK,CAACa,aAAa,CAAG,MAAM,CAC3CF,cAAc,CAACX,KAAK,CAACc,MAAM,CAAG,MAAM,CACpCH,cAAc,CAACX,KAAK,CAACe,MAAM,CAAG,SAAS,CAEvC;AACAJ,cAAc,CAACX,KAAK,CAACgB,SAAS,CAAG,+BAA+B,CAEhE;AACA;AACA,KAAM,CAAAC,qBAAqB,CAAGN,cAAc,CAACO,sBAAsB,CACnE,GAAID,qBAAqB,CAAE,CACzBN,cAAc,CAACQ,mBAAmB,CAAC,OAAO,CAAEF,qBAAqB,CAAC,CACpE,CAEA;AACA,KAAM,CAAAG,YAAY,CAAIvB,CAAC,EAAK,CAC1B;AACAA,CAAC,CAACC,eAAe,CAAC,CAAC,CACnB;AACAU,MAAM,CAACa,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,CAAE,EAAE,CAAE,GAAG,CAAC,CACrC;AACAd,MAAM,CAACC,aAAa,CAAC,GAAI,CAAAc,KAAK,CAAC,UAAU,CAAC,CAAC,CAC7C,CAAC,CAED,KAAM,CAAAC,YAAY,CAAI3B,CAAC,EAAK,CAC1B;AACAA,CAAC,CAACC,eAAe,CAAC,CAAC,CACnBD,CAAC,CAACE,cAAc,CAAC,CAAC,CAAE;AACpB;AACAS,MAAM,CAACa,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,CAAE,EAAE,CAAE,GAAG,CAAC,CACrC;AACAd,MAAM,CAACC,aAAa,CAAC,GAAI,CAAAc,KAAK,CAAC,UAAU,CAAC,CAAC,CAC7C,CAAC,CAED;AACA,KAAM,CAAAE,qBAAqB,CAAGd,cAAc,CAACe,sBAAsB,CACnE,GAAID,qBAAqB,CAAE,CACzBd,cAAc,CAACQ,mBAAmB,CAAC,YAAY,CAAEM,qBAAqB,CAAC,CACzE,CAEAd,cAAc,CAACf,gBAAgB,CAAC,OAAO,CAAEwB,YAAY,CAAC,CACtDT,cAAc,CAACf,gBAAgB,CAAC,YAAY,CAAE4B,YAAY,CAAC,CAC3Db,cAAc,CAACO,sBAAsB,CAAGE,YAAY,CACpDT,cAAc,CAACe,sBAAsB,CAAGF,YAAY,CACtD,CACF,CAAC,CAED;AACAtD,wBAAwB,CAAC,CAAC,CAC1BwC,qBAAqB,CAAC,CAAC,CAEvB;AACA,KAAM,CAAAiB,QAAQ,CAAG,GAAI,CAAAC,gBAAgB,CAAEC,SAAS,EAAK,CACnD,GAAI,CAAAC,wBAAwB,CAAG,KAAK,CACpC,GAAI,CAAAC,2BAA2B,CAAG,KAAK,CAEvCF,SAAS,CAACvD,OAAO,CAAE0D,QAAQ,EAAK,CAC9B,GAAIA,QAAQ,CAACC,IAAI,GAAK,WAAW,EAAID,QAAQ,CAACE,UAAU,CAACC,MAAM,CAAE,CAC/DL,wBAAwB,CAAG,IAAI,CACjC,CACA,GAAIE,QAAQ,CAACC,IAAI,GAAK,YAAY,EAAID,QAAQ,CAACI,aAAa,GAAK,mBAAmB,CAAE,CACpFL,2BAA2B,CAAG,IAAI,CACpC,CACF,CAAC,CAAC,CAEF,GAAID,wBAAwB,CAAE5D,wBAAwB,CAAC,CAAC,CACxD,GAAI6D,2BAA2B,CAAErB,qBAAqB,CAAC,CAAC,CAC1D,CAAC,CAAC,CAEFiB,QAAQ,CAACU,OAAO,CAACjE,QAAQ,CAACkE,IAAI,CAAE,CAC9BC,SAAS,CAAE,IAAI,CACfC,OAAO,CAAE,IAAI,CACbC,UAAU,CAAE,IAAI,CAChBC,eAAe,CAAE,CAAC,mBAAmB,CACvC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,wBAAwB,CAAGA,CAAA,GAAM,CACrC,KAAM,CAAAC,MAAM,CAAGxE,QAAQ,CAACwC,aAAa,CAAC,QAAQ,CAAC,CAC/C,GAAIgC,MAAM,CAAE,CACV;AACAA,MAAM,CAAChD,gBAAgB,CAAC,WAAW,CAAGC,CAAC,EAAK,CAC1C,GAAIA,CAAC,CAACgD,MAAM,GAAKD,MAAM,CAAE,CACvB/C,CAAC,CAACE,cAAc,CAAC,CAAC,CACpB,CACF,CAAC,CAAE,CAAE+C,OAAO,CAAE,KAAM,CAAC,CAAC,CACxB,CACF,CAAC,CAEDH,wBAAwB,CAAC,CAAC,CAE1B;AACA,MAAO,IAAM,CACXhB,QAAQ,CAACoB,UAAU,CAAC,CAAC,CACrB;AACA3E,QAAQ,CAACC,gBAAgB,CAAC,iBAAiB,CAAC,CAACC,OAAO,CAAC0E,EAAE,EAAIA,EAAE,CAACC,MAAM,CAAC,CAAC,CAAC,CACzE,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,MAAO,KAAI,CACb,CAAC,CAED,cAAe,CAAAhF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}