{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { DiscardMaterial } from '../materials/DiscardMaterial.js';\nimport { version } from '../helpers/constants.js';\nfunction isLight(object) {\n  return object.isLight;\n}\nfunction isGeometry(object) {\n  return !!object.geometry;\n}\nconst accumulativeContext = /* @__PURE__ */React.createContext(null);\nconst SoftShadowMaterial = /* @__PURE__ */shaderMaterial({\n  color: /* @__PURE__ */new THREE.Color(),\n  blend: 2.0,\n  alphaTest: 0.75,\n  opacity: 0,\n  map: null\n}, `varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vUv = uv;\n   }`, `varying vec2 vUv;\n   uniform sampler2D map;\n   uniform vec3 color;\n   uniform float opacity;\n   uniform float alphaTest;\n   uniform float blend;\n   void main() {\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nconst AccumulativeShadows = /* @__PURE__ */React.forwardRef((_ref, forwardRef) => {\n  let {\n    children,\n    temporal,\n    frames = 40,\n    limit = Infinity,\n    blend = 20,\n    scale = 10,\n    opacity = 1,\n    alphaTest = 0.75,\n    color = 'black',\n    colorBlend = 2,\n    resolution = 1024,\n    toneMapped = true,\n    ...props\n  } = _ref;\n  extend({\n    SoftShadowMaterial\n  });\n  const gl = useThree(state => state.gl);\n  const scene = useThree(state => state.scene);\n  const camera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const gPlane = React.useRef(null);\n  const gLights = React.useRef(null);\n  const [plm] = React.useState(() => new ProgressiveLightMap(gl, scene, resolution));\n  React.useLayoutEffect(() => {\n    plm.configure(gPlane.current);\n  }, []);\n  const api = React.useMemo(() => ({\n    lights: new Map(),\n    temporal: !!temporal,\n    frames: Math.max(2, frames),\n    blend: Math.max(2, frames === Infinity ? blend : frames),\n    count: 0,\n    getMesh: () => gPlane.current,\n    reset: () => {\n      // Clear buffers, reset opacities, set frame count to 0\n      plm.clear();\n      const material = gPlane.current.material;\n      material.opacity = 0;\n      material.alphaTest = 0;\n      api.count = 0;\n    },\n    update: function () {\n      let frames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      // Adapt the opacity-blend ratio to the number of frames\n      const material = gPlane.current.material;\n      if (!api.temporal) {\n        material.opacity = opacity;\n        material.alphaTest = alphaTest;\n      } else {\n        material.opacity = Math.min(opacity, material.opacity + opacity / api.blend);\n        material.alphaTest = Math.min(alphaTest, material.alphaTest + alphaTest / api.blend);\n      }\n\n      // Switch accumulative lights on\n      gLights.current.visible = true;\n      // Collect scene lights and meshes\n      plm.prepare();\n\n      // Update the lightmap and the accumulative lights\n      for (let i = 0; i < frames; i++) {\n        api.lights.forEach(light => light.update());\n        plm.update(camera, api.blend);\n      }\n      // Switch lights off\n      gLights.current.visible = false;\n      // Restore lights and meshes\n      plm.finish();\n    }\n  }), [plm, camera, scene, temporal, frames, blend, opacity, alphaTest]);\n  React.useLayoutEffect(() => {\n    // Reset internals, buffers, ...\n    api.reset();\n    // Update lightmap\n    if (!api.temporal && api.frames !== Infinity) api.update(api.blend);\n  });\n\n  // Expose api, allow children to set itself as the main light source\n  React.useImperativeHandle(forwardRef, () => api, [api]);\n  useFrame(() => {\n    if ((api.temporal || api.frames === Infinity) && api.count < api.frames && api.count < limit) {\n      invalidate();\n      api.update();\n      api.count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    traverse: () => null,\n    ref: gLights\n  }, /*#__PURE__*/React.createElement(accumulativeContext.Provider, {\n    value: api\n  }, children)), /*#__PURE__*/React.createElement(\"mesh\", {\n    receiveShadow: true,\n    ref: gPlane,\n    scale: scale,\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"softShadowMaterial\", {\n    transparent: true,\n    depthWrite: false,\n    toneMapped: toneMapped,\n    color: color,\n    blend: colorBlend,\n    map: plm.progressiveLightMap2.texture\n  })));\n});\nconst RandomizedLight = /* @__PURE__ */React.forwardRef((_ref2, forwardRef) => {\n  let {\n    castShadow = true,\n    bias = 0.001,\n    mapSize = 512,\n    size = 5,\n    near = 0.5,\n    far = 500,\n    frames = 1,\n    position = [0, 0, 0],\n    radius = 1,\n    amount = 8,\n    intensity = version >= 155 ? Math.PI : 1,\n    ambient = 0.5,\n    ...props\n  } = _ref2;\n  const gLights = React.useRef(null);\n  const length = new THREE.Vector3(...position).length();\n  const parent = React.useContext(accumulativeContext);\n  const update = React.useCallback(() => {\n    let light;\n    if (gLights.current) {\n      for (let l = 0; l < gLights.current.children.length; l++) {\n        light = gLights.current.children[l];\n        if (Math.random() > ambient) {\n          light.position.set(position[0] + THREE.MathUtils.randFloatSpread(radius), position[1] + THREE.MathUtils.randFloatSpread(radius), position[2] + THREE.MathUtils.randFloatSpread(radius));\n        } else {\n          let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\n          let phi = 2 * Math.PI * Math.random();\n          light.position.set(Math.cos(lambda) * Math.cos(phi) * length, Math.abs(Math.cos(lambda) * Math.sin(phi) * length), Math.sin(lambda) * length);\n        }\n      }\n    }\n  }, [radius, ambient, length, ...position]);\n  const api = React.useMemo(() => ({\n    update\n  }), [update]);\n  React.useImperativeHandle(forwardRef, () => api, [api]);\n  React.useLayoutEffect(() => {\n    const group = gLights.current;\n    if (parent) parent.lights.set(group.uuid, api);\n    return () => void parent.lights.delete(group.uuid);\n  }, [parent, api]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: gLights\n  }, props), Array.from({\n    length: amount\n  }, (_, index) => /*#__PURE__*/React.createElement(\"directionalLight\", {\n    key: index,\n    castShadow: castShadow,\n    \"shadow-bias\": bias,\n    \"shadow-mapSize\": [mapSize, mapSize],\n    intensity: intensity / amount\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    attach: \"shadow-camera\",\n    args: [-size, size, size, -size, near, far]\n  }))));\n});\n\n// Based on \"Progressive Light Map Accumulator\", by [zalo](https://github.com/zalo/)\nclass ProgressiveLightMap {\n  constructor(renderer, scene) {\n    let res = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1024;\n    this.renderer = renderer;\n    this.res = res;\n    this.scene = scene;\n    this.buffer1Active = false;\n    this.lights = [];\n    this.meshes = [];\n    this.object = null;\n    this.clearColor = new THREE.Color();\n    this.clearAlpha = 0;\n\n    // Create the Progressive LightMap Texture\n    const textureParams = {\n      type: THREE.HalfFloatType,\n      magFilter: THREE.NearestFilter,\n      minFilter: THREE.NearestFilter\n    };\n    this.progressiveLightMap1 = new THREE.WebGLRenderTarget(this.res, this.res, textureParams);\n    this.progressiveLightMap2 = new THREE.WebGLRenderTarget(this.res, this.res, textureParams);\n\n    // Inject some spicy new logic into a standard phong material\n    this.discardMat = new DiscardMaterial();\n    this.targetMat = new THREE.MeshLambertMaterial({\n      fog: false\n    });\n    this.previousShadowMap = {\n      value: this.progressiveLightMap1.texture\n    };\n    this.averagingWindow = {\n      value: 100\n    };\n    this.targetMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = 'varying vec2 vUv;\\n' + shader.vertexShader.slice(0, -1) + 'vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }';\n\n      // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv;\\n' + shader.fragmentShader.slice(0, bodyStart) + 'uniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/ averagingWindow);\n      }`;\n\n      // Set the Previous Frame's Texture Buffer and Averaging Window\n      shader.uniforms.previousShadowMap = this.previousShadowMap;\n      shader.uniforms.averagingWindow = this.averagingWindow;\n    };\n  }\n  clear() {\n    this.renderer.getClearColor(this.clearColor);\n    this.clearAlpha = this.renderer.getClearAlpha();\n    this.renderer.setClearColor('black', 1);\n    this.renderer.setRenderTarget(this.progressiveLightMap1);\n    this.renderer.clear();\n    this.renderer.setRenderTarget(this.progressiveLightMap2);\n    this.renderer.clear();\n    this.renderer.setRenderTarget(null);\n    this.renderer.setClearColor(this.clearColor, this.clearAlpha);\n    this.lights = [];\n    this.meshes = [];\n    this.scene.traverse(object => {\n      if (isGeometry(object)) {\n        this.meshes.push({\n          object,\n          material: object.material\n        });\n      } else if (isLight(object)) {\n        this.lights.push({\n          object,\n          intensity: object.intensity\n        });\n      }\n    });\n  }\n  prepare() {\n    this.lights.forEach(light => light.object.intensity = 0);\n    this.meshes.forEach(mesh => mesh.object.material = this.discardMat);\n  }\n  finish() {\n    this.lights.forEach(light => light.object.intensity = light.intensity);\n    this.meshes.forEach(mesh => mesh.object.material = mesh.material);\n  }\n  configure(object) {\n    this.object = object;\n  }\n  update(camera) {\n    let blendWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    if (!this.object) return;\n    // Set each object's material to the UV Unwrapped Surface Mapping Version\n    this.averagingWindow.value = blendWindow;\n    this.object.material = this.targetMat;\n    // Ping-pong two surface buffers for reading/writing\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;\n    // Render the object's surface maps\n    const oldBg = this.scene.background;\n    this.scene.background = null;\n    this.renderer.setRenderTarget(activeMap);\n    this.previousShadowMap.value = inactiveMap.texture;\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera);\n    this.renderer.setRenderTarget(null);\n    this.scene.background = oldBg;\n  }\n}\nexport { AccumulativeShadows, RandomizedLight, accumulativeContext };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useFrame","shaderMaterial","DiscardMaterial","version","isLight","object","isGeometry","geometry","accumulativeContext","createContext","SoftShadowMaterial","color","Color","blend","alphaTest","opacity","map","AccumulativeShadows","forwardRef","_ref","children","temporal","frames","limit","Infinity","scale","colorBlend","resolution","toneMapped","props","gl","state","scene","camera","invalidate","gPlane","useRef","gLights","plm","useState","ProgressiveLightMap","useLayoutEffect","configure","current","api","useMemo","lights","Map","Math","max","count","getMesh","reset","clear","material","update","arguments","length","undefined","min","visible","prepare","i","forEach","light","finish","useImperativeHandle","createElement","traverse","ref","Provider","value","receiveShadow","rotation","PI","transparent","depthWrite","progressiveLightMap2","texture","RandomizedLight","_ref2","castShadow","bias","mapSize","size","near","far","position","radius","amount","intensity","ambient","Vector3","parent","useContext","useCallback","l","random","set","MathUtils","randFloatSpread","lambda","acos","phi","cos","abs","sin","group","uuid","delete","Array","from","_","index","key","attach","args","constructor","renderer","res","buffer1Active","meshes","clearColor","clearAlpha","textureParams","type","HalfFloatType","magFilter","NearestFilter","minFilter","progressiveLightMap1","WebGLRenderTarget","discardMat","targetMat","MeshLambertMaterial","fog","previousShadowMap","averagingWindow","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","uniforms","getClearColor","getClearAlpha","setClearColor","setRenderTarget","push","mesh","blendWindow","activeMap","inactiveMap","oldBg","background","render"],"sources":["D:/portfolio/node_modules/@react-three/drei/core/AccumulativeShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { DiscardMaterial } from '../materials/DiscardMaterial.js';\nimport { version } from '../helpers/constants.js';\n\nfunction isLight(object) {\n  return object.isLight;\n}\nfunction isGeometry(object) {\n  return !!object.geometry;\n}\nconst accumulativeContext = /* @__PURE__ */React.createContext(null);\nconst SoftShadowMaterial = /* @__PURE__ */shaderMaterial({\n  color: /* @__PURE__ */new THREE.Color(),\n  blend: 2.0,\n  alphaTest: 0.75,\n  opacity: 0,\n  map: null\n}, `varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vUv = uv;\n   }`, `varying vec2 vUv;\n   uniform sampler2D map;\n   uniform vec3 color;\n   uniform float opacity;\n   uniform float alphaTest;\n   uniform float blend;\n   void main() {\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nconst AccumulativeShadows = /* @__PURE__ */React.forwardRef(({\n  children,\n  temporal,\n  frames = 40,\n  limit = Infinity,\n  blend = 20,\n  scale = 10,\n  opacity = 1,\n  alphaTest = 0.75,\n  color = 'black',\n  colorBlend = 2,\n  resolution = 1024,\n  toneMapped = true,\n  ...props\n}, forwardRef) => {\n  extend({\n    SoftShadowMaterial\n  });\n  const gl = useThree(state => state.gl);\n  const scene = useThree(state => state.scene);\n  const camera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const gPlane = React.useRef(null);\n  const gLights = React.useRef(null);\n  const [plm] = React.useState(() => new ProgressiveLightMap(gl, scene, resolution));\n  React.useLayoutEffect(() => {\n    plm.configure(gPlane.current);\n  }, []);\n  const api = React.useMemo(() => ({\n    lights: new Map(),\n    temporal: !!temporal,\n    frames: Math.max(2, frames),\n    blend: Math.max(2, frames === Infinity ? blend : frames),\n    count: 0,\n    getMesh: () => gPlane.current,\n    reset: () => {\n      // Clear buffers, reset opacities, set frame count to 0\n      plm.clear();\n      const material = gPlane.current.material;\n      material.opacity = 0;\n      material.alphaTest = 0;\n      api.count = 0;\n    },\n    update: (frames = 1) => {\n      // Adapt the opacity-blend ratio to the number of frames\n      const material = gPlane.current.material;\n      if (!api.temporal) {\n        material.opacity = opacity;\n        material.alphaTest = alphaTest;\n      } else {\n        material.opacity = Math.min(opacity, material.opacity + opacity / api.blend);\n        material.alphaTest = Math.min(alphaTest, material.alphaTest + alphaTest / api.blend);\n      }\n\n      // Switch accumulative lights on\n      gLights.current.visible = true;\n      // Collect scene lights and meshes\n      plm.prepare();\n\n      // Update the lightmap and the accumulative lights\n      for (let i = 0; i < frames; i++) {\n        api.lights.forEach(light => light.update());\n        plm.update(camera, api.blend);\n      }\n      // Switch lights off\n      gLights.current.visible = false;\n      // Restore lights and meshes\n      plm.finish();\n    }\n  }), [plm, camera, scene, temporal, frames, blend, opacity, alphaTest]);\n  React.useLayoutEffect(() => {\n    // Reset internals, buffers, ...\n    api.reset();\n    // Update lightmap\n    if (!api.temporal && api.frames !== Infinity) api.update(api.blend);\n  });\n\n  // Expose api, allow children to set itself as the main light source\n  React.useImperativeHandle(forwardRef, () => api, [api]);\n  useFrame(() => {\n    if ((api.temporal || api.frames === Infinity) && api.count < api.frames && api.count < limit) {\n      invalidate();\n      api.update();\n      api.count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    traverse: () => null,\n    ref: gLights\n  }, /*#__PURE__*/React.createElement(accumulativeContext.Provider, {\n    value: api\n  }, children)), /*#__PURE__*/React.createElement(\"mesh\", {\n    receiveShadow: true,\n    ref: gPlane,\n    scale: scale,\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"softShadowMaterial\", {\n    transparent: true,\n    depthWrite: false,\n    toneMapped: toneMapped,\n    color: color,\n    blend: colorBlend,\n    map: plm.progressiveLightMap2.texture\n  })));\n});\nconst RandomizedLight = /* @__PURE__ */React.forwardRef(({\n  castShadow = true,\n  bias = 0.001,\n  mapSize = 512,\n  size = 5,\n  near = 0.5,\n  far = 500,\n  frames = 1,\n  position = [0, 0, 0],\n  radius = 1,\n  amount = 8,\n  intensity = version >= 155 ? Math.PI : 1,\n  ambient = 0.5,\n  ...props\n}, forwardRef) => {\n  const gLights = React.useRef(null);\n  const length = new THREE.Vector3(...position).length();\n  const parent = React.useContext(accumulativeContext);\n  const update = React.useCallback(() => {\n    let light;\n    if (gLights.current) {\n      for (let l = 0; l < gLights.current.children.length; l++) {\n        light = gLights.current.children[l];\n        if (Math.random() > ambient) {\n          light.position.set(position[0] + THREE.MathUtils.randFloatSpread(radius), position[1] + THREE.MathUtils.randFloatSpread(radius), position[2] + THREE.MathUtils.randFloatSpread(radius));\n        } else {\n          let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\n          let phi = 2 * Math.PI * Math.random();\n          light.position.set(Math.cos(lambda) * Math.cos(phi) * length, Math.abs(Math.cos(lambda) * Math.sin(phi) * length), Math.sin(lambda) * length);\n        }\n      }\n    }\n  }, [radius, ambient, length, ...position]);\n  const api = React.useMemo(() => ({\n    update\n  }), [update]);\n  React.useImperativeHandle(forwardRef, () => api, [api]);\n  React.useLayoutEffect(() => {\n    const group = gLights.current;\n    if (parent) parent.lights.set(group.uuid, api);\n    return () => void parent.lights.delete(group.uuid);\n  }, [parent, api]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: gLights\n  }, props), Array.from({\n    length: amount\n  }, (_, index) => /*#__PURE__*/React.createElement(\"directionalLight\", {\n    key: index,\n    castShadow: castShadow,\n    \"shadow-bias\": bias,\n    \"shadow-mapSize\": [mapSize, mapSize],\n    intensity: intensity / amount\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    attach: \"shadow-camera\",\n    args: [-size, size, size, -size, near, far]\n  }))));\n});\n\n// Based on \"Progressive Light Map Accumulator\", by [zalo](https://github.com/zalo/)\nclass ProgressiveLightMap {\n  constructor(renderer, scene, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.scene = scene;\n    this.buffer1Active = false;\n    this.lights = [];\n    this.meshes = [];\n    this.object = null;\n    this.clearColor = new THREE.Color();\n    this.clearAlpha = 0;\n\n    // Create the Progressive LightMap Texture\n    const textureParams = {\n      type: THREE.HalfFloatType,\n      magFilter: THREE.NearestFilter,\n      minFilter: THREE.NearestFilter\n    };\n    this.progressiveLightMap1 = new THREE.WebGLRenderTarget(this.res, this.res, textureParams);\n    this.progressiveLightMap2 = new THREE.WebGLRenderTarget(this.res, this.res, textureParams);\n\n    // Inject some spicy new logic into a standard phong material\n    this.discardMat = new DiscardMaterial();\n    this.targetMat = new THREE.MeshLambertMaterial({\n      fog: false\n    });\n    this.previousShadowMap = {\n      value: this.progressiveLightMap1.texture\n    };\n    this.averagingWindow = {\n      value: 100\n    };\n    this.targetMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = 'varying vec2 vUv;\\n' + shader.vertexShader.slice(0, -1) + 'vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }';\n\n      // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv;\\n' + shader.fragmentShader.slice(0, bodyStart) + 'uniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/ averagingWindow);\n      }`;\n\n      // Set the Previous Frame's Texture Buffer and Averaging Window\n      shader.uniforms.previousShadowMap = this.previousShadowMap;\n      shader.uniforms.averagingWindow = this.averagingWindow;\n    };\n  }\n  clear() {\n    this.renderer.getClearColor(this.clearColor);\n    this.clearAlpha = this.renderer.getClearAlpha();\n    this.renderer.setClearColor('black', 1);\n    this.renderer.setRenderTarget(this.progressiveLightMap1);\n    this.renderer.clear();\n    this.renderer.setRenderTarget(this.progressiveLightMap2);\n    this.renderer.clear();\n    this.renderer.setRenderTarget(null);\n    this.renderer.setClearColor(this.clearColor, this.clearAlpha);\n    this.lights = [];\n    this.meshes = [];\n    this.scene.traverse(object => {\n      if (isGeometry(object)) {\n        this.meshes.push({\n          object,\n          material: object.material\n        });\n      } else if (isLight(object)) {\n        this.lights.push({\n          object,\n          intensity: object.intensity\n        });\n      }\n    });\n  }\n  prepare() {\n    this.lights.forEach(light => light.object.intensity = 0);\n    this.meshes.forEach(mesh => mesh.object.material = this.discardMat);\n  }\n  finish() {\n    this.lights.forEach(light => light.object.intensity = light.intensity);\n    this.meshes.forEach(mesh => mesh.object.material = mesh.material);\n  }\n  configure(object) {\n    this.object = object;\n  }\n  update(camera, blendWindow = 100) {\n    if (!this.object) return;\n    // Set each object's material to the UV Unwrapped Surface Mapping Version\n    this.averagingWindow.value = blendWindow;\n    this.object.material = this.targetMat;\n    // Ping-pong two surface buffers for reading/writing\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;\n    // Render the object's surface maps\n    const oldBg = this.scene.background;\n    this.scene.background = null;\n    this.renderer.setRenderTarget(activeMap);\n    this.previousShadowMap.value = inactiveMap.texture;\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera);\n    this.renderer.setRenderTarget(null);\n    this.scene.background = oldBg;\n  }\n}\n\nexport { AccumulativeShadows, RandomizedLight, accumulativeContext };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}