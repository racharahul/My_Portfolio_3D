{"ast":null,"code":"import { WebGLCubeRenderTarget, CubeCamera } from 'three';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nfunction Preload(_ref) {\n  let {\n    all,\n    scene,\n    camera\n  } = _ref;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const dCamera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  });\n  const dScene = useThree(_ref4 => {\n    let {\n      scene\n    } = _ref4;\n    return scene;\n  });\n\n  // Layout effect because it must run before React commits\n  React.useLayoutEffect(() => {\n    const invisible = [];\n    if (all) {\n      (scene || dScene).traverse(object => {\n        if (object.visible === false) {\n          invisible.push(object);\n          object.visible = true;\n        }\n      });\n    }\n    // Now compile the scene\n    gl.compile(scene || dScene, camera || dCamera);\n    // And for good measure, hit it with a cube camera\n    const cubeRenderTarget = new WebGLCubeRenderTarget(128);\n    const cubeCamera = new CubeCamera(0.01, 100000, cubeRenderTarget);\n    cubeCamera.update(gl, scene || dScene);\n    cubeRenderTarget.dispose();\n    // Flips these objects back\n    invisible.forEach(object => object.visible = false);\n  }, []);\n  return null;\n}\nexport { Preload };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}