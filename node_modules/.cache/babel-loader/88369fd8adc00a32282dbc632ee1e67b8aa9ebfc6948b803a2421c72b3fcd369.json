{"ast":null,"code":"import * as THREE from 'three';\nimport { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nfunction useVideoTexture(src, props) {\n  const {\n    unsuspend,\n    start,\n    crossOrigin,\n    muted,\n    loop,\n    ...rest\n  } = {\n    unsuspend: 'loadedmetadata',\n    crossOrigin: 'Anonymous',\n    muted: true,\n    loop: true,\n    start: true,\n    playsInline: true,\n    ...props\n  };\n  const gl = useThree(state => state.gl);\n  const texture = suspend(() => new Promise((res, rej) => {\n    const video = Object.assign(document.createElement('video'), {\n      src: typeof src === 'string' && src || undefined,\n      srcObject: src instanceof MediaStream && src || undefined,\n      crossOrigin,\n      loop,\n      muted,\n      ...rest\n    });\n    const texture = new THREE.VideoTexture(video);\n    if ('colorSpace' in texture) texture.colorSpace = gl.outputColorSpace;else texture.encoding = gl.outputEncoding;\n    video.addEventListener(unsuspend, () => res(texture));\n  }), [src]);\n  useEffect(() => {\n    if (start) {\n      texture.image.play();\n      return () => texture.image.pause();\n    }\n  }, [texture, start]);\n  return texture;\n}\nexport { useVideoTexture };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}