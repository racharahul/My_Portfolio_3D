{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  _s();\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n\n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n\n      // Also enhance the canvas for better touch interaction\n      const canvas = document.querySelector('canvas');\n      if (canvas && !canvas._touchEnhanced) {\n        canvas._touchEnhanced = true;\n\n        // Make sure touch events on the canvas don't interfere with scrolling\n        canvas.style.touchAction = 'none';\n\n        // Add touch event listeners to the canvas\n        canvas.addEventListener('touchstart', e => {\n          // Don't prevent default here to allow TrackballControls to work\n          e._handled = true; // Mark as handled to prevent double handling\n        }, {\n          passive: false\n        });\n        canvas.addEventListener('touchmove', e => {\n          if (!e._handled) {\n            e.preventDefault(); // Prevent scrolling while interacting with 3D\n            e._handled = true;\n          }\n        }, {\n          passive: false\n        });\n      }\n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          if (parentSVG) {\n            var _textElement$previous, _textElement$previous2;\n            // Check if this text element already has a touch enhancer\n            const existingEnhancer = (_textElement$previous = textElement.previousSibling) === null || _textElement$previous === void 0 ? void 0 : (_textElement$previous2 = _textElement$previous.classList) === null || _textElement$previous2 === void 0 ? void 0 : _textElement$previous2.contains('touch-enhancer');\n            if (existingEnhancer) return;\n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 20); // Even larger touch area\n            touchArea.setAttribute('y', bbox.y - 20); // Even larger touch area\n            touchArea.setAttribute('width', bbox.width + 40); // Even larger touch area\n            touchArea.setAttribute('height', bbox.height + 40); // Even larger touch area\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n\n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n\n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', e => {\n              e.stopPropagation();\n              e.preventDefault(); // Prevent default touch behavior\n\n              // Provide haptic feedback if available\n              if (navigator.vibrate) {\n                navigator.vibrate(50);\n              }\n\n              // Highlight the text briefly to provide visual feedback\n              textElement.style.fill = '#64ffda';\n              setTimeout(() => {\n                textElement.style.fill = '';\n              }, 300);\n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n\n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n\n    // Enhance the minimized 3D model to ensure it's interactive on mobile\n    const enhanceMinimizedModel = () => {\n      const sceneContainer = document.querySelector('.scene-container[data-is-minimized=\"true\"]');\n      if (sceneContainer) {\n        // Ensure the minimized model is interactive\n        sceneContainer.style.pointerEvents = 'auto';\n        sceneContainer.style.zIndex = '9999';\n        sceneContainer.style.cursor = 'pointer';\n\n        // Add a subtle pulse animation to indicate interactivity\n        sceneContainer.style.animation = 'pulse 2s infinite ease-in-out';\n\n        // Add keyframes for pulse animation if they don't exist\n        if (!document.querySelector('#pulse-keyframes')) {\n          const style = document.createElement('style');\n          style.id = 'pulse-keyframes';\n          style.textContent = `\n            @keyframes pulse {\n              0% { transform: scale(1); opacity: 1; }\n              50% { transform: scale(1.05); opacity: 0.8; }\n              100% { transform: scale(1); opacity: 1; }\n            }\n          `;\n          document.head.appendChild(style);\n        }\n\n        // Make sure the container's click behavior is preserved\n        // We'll remove any existing click listeners first to avoid duplicates\n        const existingClickListener = sceneContainer._enhancedClickListener;\n        if (existingClickListener) {\n          sceneContainer.removeEventListener('click', existingClickListener);\n        }\n\n        // Add click and touch listeners that navigate to the home page\n        const clickHandler = e => {\n          // Handle clicks anywhere within the minimized 3D model\n          e.stopPropagation();\n          // Use history API instead of direct location change for better compatibility\n          window.history.pushState({}, '', '/');\n          // Dispatch a navigation event to ensure React Router updates\n          window.dispatchEvent(new Event('popstate'));\n        };\n        const touchHandler = e => {\n          // Handle touches anywhere within the minimized 3D model\n          e.stopPropagation();\n          e.preventDefault(); // Prevent default touch behavior\n          // Provide haptic feedback if available\n          if (navigator.vibrate) {\n            navigator.vibrate(50);\n          }\n          // Use history API instead of direct location change for better compatibility\n          window.history.pushState({}, '', '/');\n          // Dispatch a navigation event to ensure React Router updates\n          window.dispatchEvent(new Event('popstate'));\n        };\n\n        // Remove existing listeners if they exist\n        const existingTouchListener = sceneContainer._enhancedTouchListener;\n        if (existingTouchListener) {\n          sceneContainer.removeEventListener('touchstart', existingTouchListener);\n        }\n        sceneContainer.addEventListener('click', clickHandler);\n        sceneContainer.addEventListener('touchstart', touchHandler);\n        sceneContainer._enhancedClickListener = clickHandler;\n        sceneContainer._enhancedTouchListener = touchHandler;\n      }\n    };\n\n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n    enhanceMinimizedModel();\n\n    // Observe DOM changes to detect when new elements are added or attributes change\n    const observer = new MutationObserver(mutations => {\n      let shouldEnhanceInteraction = false;\n      let shouldEnhanceMinimizedModel = false;\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          shouldEnhanceInteraction = true;\n        }\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-is-minimized') {\n          shouldEnhanceMinimizedModel = true;\n        }\n      });\n      if (shouldEnhanceInteraction) enhanceMobileInteraction();\n      if (shouldEnhanceMinimizedModel) enhanceMinimizedModel();\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-is-minimized']\n    });\n\n    // Improve touch behavior for TrackballControls\n    const improveTrackballControls = () => {\n      const canvas = document.querySelector('canvas');\n      if (canvas) {\n        // Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\n        canvas.addEventListener('touchmove', e => {\n          if (e.target === canvas) {\n            e.preventDefault();\n          }\n        }, {\n          passive: false\n        });\n      }\n    };\n    improveTrackballControls();\n\n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n\n  // This component doesn't render anything visible\n  return null;\n};\n_s(MobileEnhancer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MobileEnhancer;\nexport default MobileEnhancer;\nvar _c;\n$RefreshReg$(_c, \"MobileEnhancer\");","map":{"version":3,"names":["React","useEffect","isMobile","MobileEnhancer","_s","enhanceMobileInteraction","textElements","document","querySelectorAll","canvas","querySelector","_touchEnhanced","style","touchAction","addEventListener","e","_handled","passive","preventDefault","forEach","textElement","enhanceTouchArea","bbox","getBBox","parentSVG","closest","_textElement$previous","_textElement$previous2","existingEnhancer","previousSibling","classList","contains","touchArea","createElementNS","setAttribute","x","y","width","height","parentNode","insertBefore","stopPropagation","navigator","vibrate","fill","setTimeout","clickEvent","MouseEvent","bubbles","cancelable","view","window","dispatchEvent","enhanceMinimizedModel","sceneContainer","pointerEvents","zIndex","cursor","animation","createElement","id","textContent","head","appendChild","existingClickListener","_enhancedClickListener","removeEventListener","clickHandler","history","pushState","Event","touchHandler","existingTouchListener","_enhancedTouchListener","observer","MutationObserver","mutations","shouldEnhanceInteraction","shouldEnhanceMinimizedModel","mutation","type","addedNodes","length","attributeName","observe","body","childList","subtree","attributes","attributeFilter","improveTrackballControls","target","disconnect","el","remove","_c","$RefreshReg$"],"sources":["D:/portfolio/src/components/MobileEnhancer.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * MobileEnhancer component\n * \n * This component applies mobile-specific enhancements without modifying the desktop experience.\n * It uses react-device-detect to only apply changes on mobile devices.\n */\nconst MobileEnhancer = () => {\n  useEffect(() => {\n    if (!isMobile) return; // Only apply enhancements on mobile devices\n    \n    // Apply mobile-specific touch event handling\n    const enhanceMobileInteraction = () => {\n      // Find all Text elements in the 3D scene (the navigation words)\n      const textElements = document.querySelectorAll('text');\n      \n      // Also enhance the canvas for better touch interaction\n      const canvas = document.querySelector('canvas');\n      if (canvas && !canvas._touchEnhanced) {\n        canvas._touchEnhanced = true;\n        \n        // Make sure touch events on the canvas don't interfere with scrolling\n        canvas.style.touchAction = 'none';\n        \n        // Add touch event listeners to the canvas\n        canvas.addEventListener('touchstart', (e) => {\n          // Don't prevent default here to allow TrackballControls to work\n          e._handled = true; // Mark as handled to prevent double handling\n        }, { passive: false });\n        \n        canvas.addEventListener('touchmove', (e) => {\n          if (!e._handled) {\n            e.preventDefault(); // Prevent scrolling while interacting with 3D\n            e._handled = true;\n          }\n        }, { passive: false });\n      }\n      \n      textElements.forEach(textElement => {\n        // Make text elements more touch-friendly\n        const enhanceTouchArea = () => {\n          // Create a larger invisible touch area around each text element\n          const bbox = textElement.getBBox();\n          const parentSVG = textElement.closest('svg');\n          \n          if (parentSVG) {\n            // Check if this text element already has a touch enhancer\n            const existingEnhancer = textElement.previousSibling?.classList?.contains('touch-enhancer');\n            if (existingEnhancer) return;\n            \n            const touchArea = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            touchArea.setAttribute('x', bbox.x - 20); // Even larger touch area\n            touchArea.setAttribute('y', bbox.y - 20); // Even larger touch area\n            touchArea.setAttribute('width', bbox.width + 40); // Even larger touch area\n            touchArea.setAttribute('height', bbox.height + 40); // Even larger touch area\n            touchArea.setAttribute('fill', 'transparent');\n            touchArea.setAttribute('class', 'touch-enhancer');\n            \n            // Insert before the text element so it's behind it\n            textElement.parentNode.insertBefore(touchArea, textElement);\n            \n            // Forward touch events to the text element\n            touchArea.addEventListener('touchstart', (e) => {\n              e.stopPropagation();\n              e.preventDefault(); // Prevent default touch behavior\n              \n              // Provide haptic feedback if available\n              if (navigator.vibrate) {\n                navigator.vibrate(50);\n              }\n              \n              // Highlight the text briefly to provide visual feedback\n              textElement.style.fill = '#64ffda';\n              setTimeout(() => {\n                textElement.style.fill = '';\n              }, 300);\n              \n              const clickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              });\n              textElement.dispatchEvent(clickEvent);\n            });\n          }\n        };\n        \n        // Apply enhancement after a short delay to ensure the 3D scene is fully rendered\n        setTimeout(enhanceTouchArea, 1000);\n      });\n    };\n    \n    // Enhance the minimized 3D model to ensure it's interactive on mobile\n    const enhanceMinimizedModel = () => {\n      const sceneContainer = document.querySelector('.scene-container[data-is-minimized=\"true\"]');\n      if (sceneContainer) {\n        // Ensure the minimized model is interactive\n        sceneContainer.style.pointerEvents = 'auto';\n        sceneContainer.style.zIndex = '9999';\n        sceneContainer.style.cursor = 'pointer';\n        \n        // Add a subtle pulse animation to indicate interactivity\n        sceneContainer.style.animation = 'pulse 2s infinite ease-in-out';\n        \n        // Add keyframes for pulse animation if they don't exist\n        if (!document.querySelector('#pulse-keyframes')) {\n          const style = document.createElement('style');\n          style.id = 'pulse-keyframes';\n          style.textContent = `\n            @keyframes pulse {\n              0% { transform: scale(1); opacity: 1; }\n              50% { transform: scale(1.05); opacity: 0.8; }\n              100% { transform: scale(1); opacity: 1; }\n            }\n          `;\n          document.head.appendChild(style);\n        }\n        \n        // Make sure the container's click behavior is preserved\n        // We'll remove any existing click listeners first to avoid duplicates\n        const existingClickListener = sceneContainer._enhancedClickListener;\n        if (existingClickListener) {\n          sceneContainer.removeEventListener('click', existingClickListener);\n        }\n        \n        // Add click and touch listeners that navigate to the home page\n        const clickHandler = (e) => {\n          // Handle clicks anywhere within the minimized 3D model\n          e.stopPropagation();\n          // Use history API instead of direct location change for better compatibility\n          window.history.pushState({}, '', '/');\n          // Dispatch a navigation event to ensure React Router updates\n          window.dispatchEvent(new Event('popstate'));\n        };\n        \n        const touchHandler = (e) => {\n          // Handle touches anywhere within the minimized 3D model\n          e.stopPropagation();\n          e.preventDefault(); // Prevent default touch behavior\n          // Provide haptic feedback if available\n          if (navigator.vibrate) {\n            navigator.vibrate(50);\n          }\n          // Use history API instead of direct location change for better compatibility\n          window.history.pushState({}, '', '/');\n          // Dispatch a navigation event to ensure React Router updates\n          window.dispatchEvent(new Event('popstate'));\n        };\n        \n        // Remove existing listeners if they exist\n        const existingTouchListener = sceneContainer._enhancedTouchListener;\n        if (existingTouchListener) {\n          sceneContainer.removeEventListener('touchstart', existingTouchListener);\n        }\n        \n        sceneContainer.addEventListener('click', clickHandler);\n        sceneContainer.addEventListener('touchstart', touchHandler);\n        sceneContainer._enhancedClickListener = clickHandler;\n        sceneContainer._enhancedTouchListener = touchHandler;\n      }\n    };\n    \n    // Apply enhancements after component mounts and whenever route changes\n    enhanceMobileInteraction();\n    enhanceMinimizedModel();\n    \n    // Observe DOM changes to detect when new elements are added or attributes change\n    const observer = new MutationObserver((mutations) => {\n      let shouldEnhanceInteraction = false;\n      let shouldEnhanceMinimizedModel = false;\n      \n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          shouldEnhanceInteraction = true;\n        }\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-is-minimized') {\n          shouldEnhanceMinimizedModel = true;\n        }\n      });\n      \n      if (shouldEnhanceInteraction) enhanceMobileInteraction();\n      if (shouldEnhanceMinimizedModel) enhanceMinimizedModel();\n    });\n    \n    observer.observe(document.body, { \n      childList: true, \n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-is-minimized']\n    });\n    \n    // Improve touch behavior for TrackballControls\n    const improveTrackballControls = () => {\n      const canvas = document.querySelector('canvas');\n      if (canvas) {\n        // Prevent default touch behavior on canvas to avoid scrolling while interacting with 3D\n        canvas.addEventListener('touchmove', (e) => {\n          if (e.target === canvas) {\n            e.preventDefault();\n          }\n        }, { passive: false });\n      }\n    };\n    \n    improveTrackballControls();\n    \n    // Cleanup function\n    return () => {\n      observer.disconnect();\n      // Remove any added touch enhancers\n      document.querySelectorAll('.touch-enhancer').forEach(el => el.remove());\n    };\n  }, []);\n  \n  // This component doesn't render anything visible\n  return null;\n};\n\nexport default MobileEnhancer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}